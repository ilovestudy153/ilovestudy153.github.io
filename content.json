{"meta":{"title":null,"subtitle":"Study for practical applications","description":"","author":"WeiFrangrances","url":"http://ilovestudy153.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-09-02T14:36:13.000Z","updated":"2020-09-02T14:38:03.303Z","comments":true,"path":"categories/index.html","permalink":"http://ilovestudy153.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-09-02T14:39:59.000Z","updated":"2020-09-02T14:40:30.397Z","comments":true,"path":"about/index.html","permalink":"http://ilovestudy153.github.io/about/index.html","excerpt":"","text":""},{"title":"404","date":"2018-09-30T09:25:30.000Z","updated":"2020-09-02T14:57:45.869Z","comments":true,"path":"404.html","permalink":"http://ilovestudy153.github.io/404.html","excerpt":"","text":""},{"title":"contact","date":"2020-09-02T14:41:10.000Z","updated":"2020-09-02T14:44:39.693Z","comments":true,"path":"contact/index.html","permalink":"http://ilovestudy153.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-09-02T14:46:51.000Z","updated":"2020-09-02T14:47:31.245Z","comments":true,"path":"friends/index.html","permalink":"http://ilovestudy153.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-09-02T14:38:31.000Z","updated":"2020-09-02T14:39:22.022Z","comments":true,"path":"tags/index.html","permalink":"http://ilovestudy153.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"HTML+CSS","slug":"HTML-CSS","date":"2020-09-01T02:56:14.000Z","updated":"2020-09-01T03:00:18.540Z","comments":true,"path":"2020/09/01/html-css/","link":"","permalink":"http://ilovestudy153.github.io/2020/09/01/html-css/","excerpt":"","text":"[toc] CSS+HTML多个类名的使用目标：实现如下图所示的所示的效果。 引入初始代码： 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;多个类名&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*先给class=div1的这个元素将其内容设置为加粗的效果 给class=div2的这个元素将其内容的颜色设置为红色 给class=div3的这个元素将其内容设置为加粗并且颜色也设置为红色*/ .div1&#123;/*类选择器，格式为：.class的属性值&#123;attr:val;&#125;*/ font-weight:bold;/*font-weight设置文字的粗细，只有normal和bold两种值可供选择*/ &#125; .div2&#123; color: #f00;/*color是给文本设置颜色，值有十六进制或英文单词以及十进制*/ &#125; .div3&#123; font-weight: bold; color: #f00; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt;我是一名优秀的程序员，我要好好给大家讲课1！&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;我是一名优秀的程序员，我要好好给大家讲课2！&lt;/div&gt; &lt;div class=&quot;div3&quot;&gt;我是一名优秀的程序员，我要好好给大家讲课3！&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 多个类名的使用代码： 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;多个类名&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*先给class=div1的这个元素将其内容设置为加粗的效果 给class=div2的这个元素将其内容的颜色设置为红色 给class=div3的这个元素将其内容设置为加粗并且颜色也设置为红色*/ .div1&#123;/*类选择器，格式为：.class的属性值&#123;attr:val;&#125;*/ font-weight:bold;/*font-weight设置文字的粗细，只有normal和bold两种值可供选择*/ &#125; .div2&#123; color: #f00;/*color是给文本设置颜色，值有十六进制或英文单词以及十进制*/ &#125; /*注释掉下列代码，在body的class属性中添加多个类名以实现同样的效果*/ /*.div3&#123; font-weight: bold; color: #f00; &#125;*/ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt;我是一名优秀的程序员，我要好好给大家讲课1！&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;我是一名优秀的程序员，我要好好给大家讲课2！&lt;/div&gt; &lt;!--&lt;div class=&quot;div3&quot;&gt;我是一名优秀的程序员，我要好好给大家讲课3！&lt;/div&gt;--&gt; &lt;!--将上述注释掉的代码用下列代码替换--&gt; &lt;!--一个标签内携带多个类名--&gt; &lt;div class=&quot;div1 div2&quot;&gt;我是一名优秀的程序员，我要好好给大家讲课3！&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 多个类名样式冲突声明：一般不会这样写代码。主要是利用多个类名来减少CSS的代码量。多个类名冲突主要是为了解决日常中可能遇到的问题，提供造成问题的原因和解决办法。因此，如果时间有限，可以不用看本节内容。 示例效果： 示例实现代码： 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;多个类名样式冲突&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*在多个类名上设置同样的样式，如如下的color样式*/ .cls1&#123; color: #f00;/*设置文本颜色为红色*/ &#125; .cls2&#123; color: #00f;/*设置文本颜色为蓝色*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=&quot;cls1 cls2&quot;&gt;如果你真的想记住什么，请在一天之内完成。如果完不成，必须在24小时以内复习。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 交换CSS中.cls1与.cls2之间的位置。以探索是&lt; p class=”cls1 cls2” &gt;中类属性值cls1与cls2位置影响？还是CSS代码中.cls1与.cls2位置的影响？ 交换位置后的效果： 交换位置后的代码： 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;多个类名样式冲突&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*在多个类名上设置同样的样式，如如下的color样式*/ &#125; .cls2&#123; color: #00f;/*设置文本颜色为蓝色*/ &#125; .cls1&#123; color: #f00;/*设置文本颜色为红色*/ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=&quot;cls1 cls2&quot;&gt;如果你真的想记住什么，请在一天之内完成。如果完不成，必须在24小时以内复习。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 由上述位置交换可以得出结论：如果一个标签内的多个类名上设置的样式相同，则会出现样式冲突。那么将会以CSS中的代码顺序作为标准，谁写在后面谁就起作用。和HTML中的class的属性值的顺序没有关系。 背景图片设置背景颜色背景图片背景图片的平铺背景图片是否固定背景图片设置的简写1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;背景颜色+背景图片+背景图片平铺+背景图片的位置+背景图片是否固定+背景图片设置的简写&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box1&#123; width: 100px; height: 100px; /*background-color用于给元素设置背景颜色，但是前提是这个元素要么有内容，要么有高度和宽度才行*/ background-color: #f00; &#125; .box2&#123; width: 1200px; height: 1000px; border: 2px solid #00f;/*给盒子加边框*/ /*background-image用于给元素设置背景图片，图片的地址一定要放在url(图片的地址)，但是前提是这个元素要么有内容，要么有高度和宽度才行*/ /*背景图片默认是平铺的，平铺即以插入图片的实际大小铺满整个高宽版面*/ background-image: url(C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg); color: #f00;/*设置背景图片上文本内容的颜色*/ /*background-repeat在网页开发时用得特别多*/ /*repeat是默认值，表示图片是平铺的 repeat-x表示图片是水平方向平铺的 repeat-y表示图片是垂直方向平铺的 no-repeat表示图片没有平铺，就显示插入图片一张*/ background-repeat: repeat; /*background-position用于设置背景图片的位置，如果要设置背景图片的位置， 这个属性就会有两个位置。 background-position:水平位置 垂直位置。这两个位置的表示方式有三种， 英文单词 固定值 百分比。这三种方式可以混合使用，即可以同时使用英文单词或固定值或百分比。 英文单词的表达方式： 水平位置：left\\right\\center 垂直位置：top\\center\\bottom*/ margin-left: auto;/*结合margin-right让盒子自动居中*/ margin-right: auto;/*结合margin-left让盒子自动居中*/ /*背景图片的位置，使用英文单词来表示 background-position: center center;*/ /*背景图片的位置，使用固定值来表示。表示图片的左上顶点距离 左边和上边的距离 background-position: 100px 100px;*/ /*背景图片的位置，使用百分比来表示 background-position: 0% 50%;*/ /*背景图片的位置，使用混合的方式来表示 background-position: 100px 50%;*/ &#125; .box3&#123; width: 1000px; height: 800px; border: 3px solid #f00; margin-left: auto; margin-right: auto; background-image: url(C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg); background-repeat: no-repeat; background-position: center center; /*设置背景图片固定,fixed后背景图片一直处于视野背景图片的设置位置*/ background-attachment: fixed;/*有两个值，fixed和scoll*/ &#125; .box4&#123; /*background: 简写属性，它可以同时设置多个样式，比如背景颜色，背景图片，背景图片是否平铺，水平位置，垂直位置。 background: 简写属性。其值的个数不定，顺序也不定，每一个值之间使用空格分隔*/ width: 1000px; height: 600px; border: 2px solid #f00; margin-left: auto; margin-right:auto; /*使用简写属性来设置*/ background: #ccc url(C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg) no-repeat center center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box1&quot;&gt;知识的高度可压缩性和残酷性&lt;/div&gt; &lt;!--下面是插入图片语法，注意区分背景图片的语法。这两种方法都是网页图片展示的主要方法--&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg&quot;&gt;&lt;!--插入图片语法--&gt; &lt;div class=&quot;box2&quot;&gt;星星之火&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt; 如果有句子或者单词不理解，我就绝不会跳到下一个。有时候我读个两三韩就需要5-10分重的时间。同一个句子，同一页文章，我会读一遍又一遍，真是无可挑剔的“蜗牛读书法”。&lt;br /&gt; 你从头读，尽量往下读知道你一窍不通时，再从头开始，这样坚持往下读知道完全读懂为止。&lt;br /&gt;首先出场的是头号大人物冯总。冯总，未来的IT界老总。本科毕业时被各大教授称赞其已达优秀硕士水平，冯总在本科期间发表多篇论文并参加国际论文会议。为了陪伴保研华中科技大学的女朋友，冯总放弃浙江大学，毅然选择了武汉大学计算机相关专业。如果你觉得他只是学习好，那你就大错特错了。在赚钱方面，冯总在本科期间总的花了不到三个月时间，就轻轻松松依靠头脑赚取了几大万。学习、金钱都有了，没有美女陪伴怎么行。冯总在大二时便抱得校花级的女朋友。学习、金钱、美女都有了，他实在闲的无聊，便培养了大批的优秀学子（我也是其中之一，不过是最差的一个）。冯总在本科期间的光芒十分耀眼，无人不知，无人不晓，他的名气穿透着各个专业。鉴于篇幅有限，冯总的辉煌功绩在此仅做简要介绍。话不多说，还是来讲讲我们的生活故事吧。开学前一天，我提前来到武汉，学校不提供住宿。那时，我从来没有住过酒店，有点害怕。我忘了在哪得到冯总的联系方式，在qq上和我聊了下，发现他是武汉本地的，不知怎么聊的，我跟他讲了一下我去学校的意图。他在征求家里同意后，让我去他家住宿。听到这个好消息我十分激动。但同时，我内心有些忐忑不安，我不知道他家里的具体情况，会不会我被骗呢？毕竟大家都没见过面，也不熟悉，仅仅是一个陌生人啊，他们竟然能热心地让我住进去。我心里很犯嘀咕，但后来一想，我一个农村崽怕啥骗哦，又没有钱。消除了我的忧虑后，我又幻想着，城市里的孩子大多数都是胖子，他会有两百斤吗？他好不好相处呢？毕竟我见过的有钱人的孩子都比较任性，而且很骄傲，要是我过去被他的骄傲欺负怎么办？心中很是苦闷。但又想到，从小开始，我的学习生涯都是独自一人，都能遇到贵人相助，最终，我还是独自一人踏上了前往武汉的路途。到了武汉，冯总来公交站接我。当我见到他时，与我脑海中想象的完全不一样，他是一个精神焕发的小伙，个子比我高，很有气质。他领着我回到他的家里，一进门，阿姨就微笑着欢迎我的到来，桌上早已做好美味佳肴，非常热心地让我加菜喝饮料。我真的很震惊，这一家人也太热心了吧。阿姨给我讲了冯总高中时的优秀，只是高考时失利，她告诫我们要好好学习，大学不是来放松的，大学期间应以学习为重。随后，阿姨让冯总带我去逛逛。我不得不说，当时冯总带我去的地方让我感到羞愧，他一来就带我去逛销品茂，给我说里面的价格有多贵，看着那些东西，我实在害怕，因为我没钱啊，我穷怕了，穷得我不敢走进高消费店。我想，那应该是冯总对我的考验吧，哈哈，他通过带我去大型商场，看看我家庭条件怎么样，这是题外话，哈哈。一天的劳累，我躺在他床上，他叫我玩游戏，我一不会玩，二是累，所以，很快便入睡了。这就是我们的第一次见面。至于后续的校园生活，后面再谈。&#x27;高总篇&#x27;高总，未来的水利兼IT老总。本科毕业，由于喜欢妹子多的学校，毅然放弃华中科技大学保研，最终选择美女如云的北京师范大学。高总的学习成绩有多优秀，我们就不谈了，就是一个字“屌”，他不服谁就能超越谁。至于排位在他前面的，那是因为他恋及情谊，不忍抢夺朋友的位置。高总的学习生活过得如闲云野鹤，但成绩之优秀让人望尘莫及。那他那么多休闲时间都去哪了呢？这可得好好聊聊了。首先，高总是篮球之王，他从一个篮球小白，迅速成长为一代篮球之王，继承了詹姆斯的强大力量，在球场上所向披靡。面对肉盾，他一马当先，用高大的身体把别人死死拦住，只为给队友上篮的机会。当他持球上篮时，无人敢挡，阻挡者要做好被碾压的准备。他的球技很强，更为重要的是，他从小白快速成为强者的过程，这效率何人能及？说到这里，大家可别认为高总是一个粗暴强悍之人。其实，他很有审美品味，看他一身装扮你就知道他是一个非常懂得浪漫的人。说到审美，不得不说到他的另一个身份——摄影大师。高总的拍照技术实在是高啊，他能把一个普通的女孩拍成女神。大多数人拍照时都不知道什么姿势好，或是怎么取景，只要遇到高总，这都不需要担心，他能给你设计姿势，让你完美地融入到取景中。这就是高手，爱好摄影的人可以和高总多多交流，他会很热心地帮助你。学习，篮球，摄影，缺了点游戏怎么行。一个貂蝉秀你秀到死。忘了说高总另一个重要技能——撩妹高手。他能理解女孩子的心思，然后会顺着女孩子的心意，把女孩子聊的特别开心，他很能把捏生活的细节，让女孩子一致承认他是个值得托付终生的人。不过，只能一人能与高总共度终生，所以，大部分女孩子只能与高总做好朋友，虽然她们不甘心，不过想到能和高总聊天玩耍，他们也就心满意足了。高总的简要介绍完毕，就来讲讲我们的相遇。来到宿舍，看着一个大个子，那时我想，怎么真么高啊，我在他面前就像一个小朋友。那时，他憨态可掬，还会脸红。当然，我也是经常脸红。不过，后面高总完完全全改变了自己，成为了具有高贵气质的成功人士。我们的校园生活，静听后续。 &lt;/div&gt; &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 背景样式综合案例效果图： 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;背景样式综合案例&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt;/*嵌入式*/ /*第一步：给body标签设置样式 标签选择器：标签名&#123;属性：值；&#125;匹配对应的HTML的标签*/ body&#123;/*让body里面的内容继承样式*/ font-size: 14px;/*设置字体大小*/ color: #f60;/*给文本设置颜色*/ &#125; .box&#123;/*类选择器：.class属性值&#123;属性：值；&#125;给拥有指定的CLASS属性值的元素设置样式*/ width: 400px; border: 1px solid #00f;/*建立边框：边框线的宽度 实体 颜色*/ /*以下两行代码实现盒子的自动居中*/ margin-left: auto;/*左外边距的值为auto*/ margin-right: auto;/*右外边距的值为auto*/ &#125; .box h2&#123;/*后代元素选择器：E F&#123;属性：值；&#125; 匹配所有属于E元素后代的F元素，E和F之间用空格分隔*/ height: 35px; line-height: 35px; color: gold; &#125; .box ul li&#123;/*后代元素选择器*/ list-style: none;/*去除项目符号*/ height: 30px; line-height: 30px;/*设置行高，与height的值相同是为了垂直居中*/ border: 1px solid #ccc; /*给每一个li标签设置一个背景图片*/ background-image: url(C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg); background-repeat: no-repeat; background-position: left center; padding-left:30px;/*左内填充，盒子里面的内容到左边框线之间的距离*/ &#125; /*对链接进行美化*/ /*1、伪类选择器是用来给超级链接（即a标签）的不同状态来设置样式。 2、遵守“爱恨准则”要先有爱，才有恨。“Love Hate” 3.1正常状态（:link）：超级链接没有被访问 3.2访问过后的状态（:visited）：超级链接已经被访问 3.3鼠标放上状态（:hover）：鼠标放在超级链接上，但是并没有将鼠标的左键按下去。 3.4激活状态（:active）鼠标左键已经按下去了，但是并没有将鼠标的左键弹出。 4、多元素选择器：选择器1，选择器2&#123;属性：值；&#125;。同时匹配选择器1和选择器2， 多个选择器之间用逗号分隔*/ a:link,a:visited&#123; color: #444; text-decoration: none;/*none(去掉文本修饰线)underline(下划线)*/ &#125; a:hover&#123; color: #f00; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;h2&gt;新闻列表&lt;/h2&gt; &lt;ul&gt; &lt;!--1、无序列表&lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;。 2、&lt;li&gt;&lt;/li&gt;之间相当于一个容器， 可以容纳所有元素。 3、锚点定位：使用&lt;a href=’#id’&gt; 链接文本 &lt;/a&gt;格式 将跳转至指定的id处，href=’#’表示不会跳转。*/--&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;学而不思则罔，思而不学则殆&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;学而不思则罔，思而不学则殆&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;学而不思则罔，思而不学则殆&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;学而不思则罔，思而不学则殆&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;学而不思则罔，思而不学则殆&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 标准文件流（了解）什么是标准文件流？HTML网页制作时，必须遵循一个“流”的规则：从左至右，从上到下。不同于类如PS画图软件，想在哪里画就在哪里画。 效果图： 代码： 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;标准文件流&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;我是优秀程序员&lt;/p&gt;&lt;!--段落标签，是一个代码块，所以占据了一整行--&gt; &lt;h2&gt;看看我在哪&lt;/h2&gt;&lt;!--由于上面p标签的影响，另起一行显示--&gt;&lt;/body&gt;&lt;/html&gt; 标准文件流要注意的事项1.空白折叠现象 代码： 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;空白折叠现象&lt;/title&gt;&lt;/head&gt;&lt;body&gt; 省 身 &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg&quot; alt=&quot;&quot;&gt;&lt;!--插入图片，alt=&quot;&quot;有无都可--&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg&quot; alt=&quot;&quot;&gt;&lt;!--alt=&quot;&quot;有什么作用--&gt; &lt;br /&gt; 省身 &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg&quot; alt=&quot;&quot;&gt;&lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg&quot; alt=&quot;&quot;&gt;&lt;/body&gt;&lt;/html&gt; 从空白折叠现象中可以看出，当代码处于不同行数时，会出现空白折叠现象；为了解决空白折叠现象，可以将要显示内容的代码放到同一行（即代码之间不跨行，连续写，代码自动换行不影响，依旧相当于连写） 2.高矮不齐，底部对齐 效果图： 代码： 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;高矮不齐，底部对齐&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; span&#123; font-size: 36px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; 人人人人人人人人人人人&lt;span&gt;姚明&lt;/span&gt;人人人人人人人人人人人人人&lt;/body&gt;&lt;/html&gt; 浮动（重点，网页布局中用得多）需求： 能够实现多个元素排在同一行，并且给这些元素设置宽度与高度！ 让多个元素排在同一行：行内元素的特性。 给这些元素设置宽度与高度：块级元素的特性。 在标准文档流中的元素只有两种：块级元素和行内元素。如果想让一些元素既要有块级元素的特点，又要有行内元素的特点，只能让这些元素脱离标准文档流（俗称“脱标”）。 浮动可以让元素脱离标准文档流，因此可以实现让多个元素排在同一行并且可以设置宽高！ 浮动它是通过一个浮动属性来实现。 float:这个属性有两个值：left（向左浮动或向左移动）、right（向右浮动或向右移动） 浮动元素的特性： 浮动元素它脱离标准文档流，它不再占用空间。 我们可以把浮动元素理解为“漂”。 浮动元素它的层级要比标准文档流里面的元素层级要高，它会将标准文档流中元素压盖住。 浮动元素它会向左或向右浮动（移动）。 浮动元素它遇到父元素的边框然后停止了浮动。 浮动元素它还会遇到上一个浮动元素后就停止了浮动。 浮动元素浮动以后，器父元素不会再包裹着浮动元素。 我们将行内元素进行浮动以后，那么这个行内元素它会变成块级元素。 浮动元素它脱离标准文档流，它不再占用空间。浮动元素它遇到父元素的边框然后停止了浮动。效果图： 浮动元素它脱离标准文档流，它不再占用空间。浮动元素它遇到父元素的边框然后停止了浮动。代码： 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;浮动&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 600px;/*使其高度根据内容自适应*/ border: 1px solid #000; margin-right: auto; margin-left: auto; &#125; .box1&#123; width: 100px; height: 100px; background-color: #f00; /*给这个元素增加浮动属性*/ float: right; &#125; .box2&#123; width: 100px; height: 100px; background-color: #0f0; &#125; .box3&#123; width: 100px; height: 100px; background-color: #00f; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;!--块元素--&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 浮动元素它的层级要比标准文档流里面的元素层级要高，它会将标准文档流中元素压盖住。效果图： 浮动元素它的层级要比标准文档流里面的元素层级要高，它会将标准文档流中元素压盖住。代码： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;浮动&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 600px;/*使其高度根据内容自适应*/ border: 1px solid #000; margin-right: auto; margin-left: auto; &#125; .box1&#123; width: 100px; height: 100px; background-color: #f00; /*给这个元素增加浮动属性*/ float: right; &#125; .box2&#123; width: 100px; height: 100px; background-color: #0f0; float: left; &#125; .box3&#123; width: 120px; height: 100px; background-color: #00f; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;!--块元素--&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 浮动元素它还会遇到上一个浮动元素后就停止了浮动。浮动元素浮动以后，器父元素不会再包裹着浮动元素。效果图： 浮动元素它还会遇到上一个浮动元素后就停止了浮动。浮动元素浮动以后，器父元素不会再包裹着浮动元素。代码： 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;浮动&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 600px;/*使其高度根据内容自适应*/ border: 1px solid #000; margin-right: auto; margin-left: auto; &#125; .box1&#123; width: 100px; height: 100px; background-color: #f00; /*给这个元素增加浮动属性*/ float: right; &#125; .box2&#123; width: 100px; height: 100px; background-color: #0f0; float: left; &#125; .box3&#123; width: 120px; height: 100px; background-color: #00f; float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;!--块元素--&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 我们将行内元素进行浮动以后，那么这个行内元素它会变成块级元素。效果图： 我们将行内元素进行浮动以后，那么这个行内元素它会变成块级元素。代码： 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;浮动&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 600px; border: 1px solid #000; margin-right: auto; margin-left: auto; &#125; .s1&#123;/*给行内元素设置宽度与高度,但不会有变化*/ width: 100px; height: 100px; background-color: #f00; &#125; .s2&#123; background-color: #0f0; &#125; .s3&#123; width: 100px; height: 100px; background-color: #059; /*让其向左浮动，之前设置的宽度与高度将会显现出来, 对比s1的设置不会显现*/ float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;span class=&quot;s1&quot;&gt;静心一&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;静心二&lt;/span&gt; &lt;span class=&quot;s3&quot;&gt;静心三&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 清除浮动注意：只要有浮动，那么必须有清除浮动。 为什么要清除浮动? 因为经过浮动的元素，它会影响到它下面的元素的排列的布局，另外，浮动元素的父元素没有将浮动元素包裹着。效果图如下： ​ 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;为什么要清除浮动&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 600px; border: 1px solid #000; margin-right: auto; margin-left: auto; &#125; .box div&#123; width: 100px; height: 100px; &#125; .s1&#123; background-color: #f00; /*向左浮动*/ float: left; &#125; .s2&#123; background-color: #0f0; /*向左浮动*/ float: left; &#125; .s3&#123; background-color: #059; /*向右浮动*/ float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;s1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;s2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;s3&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;h2&gt;清除浮动&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; 只要清除了浮动，不会影响到浮动元素的下面进行排版布局，浮动元素的父元素会将浮动元素从视觉上包裹着。 清除浮动有以下三种方法： 方法1.给浮动元素的父元素设置一个固定的高度 方法1的代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;给浮动元素的父元素指定高度&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 600px; border: 1px solid #000; margin-right: auto; margin-left: auto; /*class=&quot;box&quot;这个元素就是浮动元素的父元素， 方法1：给浮动元素的父元素设定一个指定的高度*/ height: 100px; &#125; .box div&#123; width: 100px; height: 100px; &#125; .s1&#123; background-color: #f00; /*向左浮动*/ float: left; &#125; .s2&#123; background-color: #0f0; /*向左浮动*/ float: left; &#125; .s3&#123; background-color: #059; /*向右浮动*/ float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;s1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;s2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;s3&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;h2&gt;清除浮动&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; ​ 方法2.使用清除浮动的样式属性 clear。clear这个属性是专用于来清除浮动的，这个属性有三个值：clear:left;清除左浮动。clear:right;清除右浮动。clear:both;两者都清除。这个属性一般用在最后一个浮动元素的下面，再最后一个浮动元素的下main新建一个空白的div，这个div什么都不放，不要给这个div放置内容。它只能左一件事，就是清除浮动。效果图如下： 方法2的代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;给浮动元素的父元素指定高度&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 600px; border: 1px solid #000; margin-right: auto; margin-left: auto; &#125; /*当使用方法2的clear属性清除浮动时，不能用下面的语句给所有div指定宽度，因为使用clear属性时会增加一个空白div，使得父元素包裹的空间被多开辟出一块。 .box div&#123; width: 100px; height: 100px; &#125;*/ .s1&#123; width: 100px; height: 100px; background-color: #f00; /*向左浮动*/ float: left; &#125; .s2&#123; width: 100px; height: 100px; background-color: #0f0; /*向左浮动*/ float: left; &#125; .s3&#123; width: 100px; height: 100px; background-color: #059; /*向右浮动*/ float: right; &#125; /*使用清除浮动的样式属性*/ .clear&#123; clear: both; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;s1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;s2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;s3&quot;&gt;&lt;/div&gt; &lt;!--在最后一个浮动元素的下面新建一个空白的div，这个div的主要共功能就是用于清除浮动--&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;h2&gt;清除浮动&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; ​ 方法3.使用overflow:hidden这个属性来清除浮动。overflow是一个属性，overflow:hidden它原意是用来将溢出的部分进行隐藏，但它还可以用来清除浮动。一般用来清除列表的浮动元素。溢出效果图如下： 将overflow的内容隐藏效果图（看不到隐藏内容）： 溢出内容的隐藏代码如下： 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用overflow来隐藏溢出的内容&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 400px; height: 100px; border: 1px solid #000; margin-right: auto; margin-left: auto; /*将溢出部分隐藏*/ overflow: hidden; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; 先出场的是头号大人物冯总。冯总，未来的IT界老总。本科毕业时被各大教授称赞其已达优秀硕士水平，冯总在本科期间发表多篇论文并参加国际论文会议。为了陪伴保研华中科技大学的女朋友，冯总放弃浙江大学，毅然选择了武汉大学计算机相关专业。如果你觉得他只是学习好，那你就大错特错了。在赚钱方面，冯总在本科期间总的花了不到三个月时间，就轻轻松松依靠头脑赚取了几大万。学习、金钱都有了，没有美女陪伴怎么行。冯总在大二时便抱得校花级的女朋友。学习、金钱、美女都有了，他实在闲的无聊，便培养了大批的优秀学子（我也是其中之一，不过是最差的一个）。冯总在本科期间的光芒十分耀眼，无人不知，无人不晓，他的名气穿透着各个专业。鉴于篇幅有限，冯总的辉煌功绩在此仅做简要介绍。 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 方法3：使用overflow:hidden;属性主要用于清除列表中的浮动元素。效果图如下： 方法3代码如下： 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用overflow_hidden来清除浮动&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; ul&#123; list-style: none;/*去掉项目符号*/ &#125; ul li&#123; float: left; border: 1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!--给li的父元素增加设置一个overflow:hidden;属性来清除浮动元素--&gt; &lt;ul style=&quot;overflow: hidden;&quot;&gt;&lt;!--行内式--&gt; &lt;!--行内式是指将CSS代码书写在HTML标签的style属性中。style是一个通用属性，每一个标签里都有这个属性！ 语法格式：&lt;标签名 style=’属性：值；属性：值；’&gt;&lt;/标签名&gt;--&gt; &lt;li&gt;学习思维1&lt;/li&gt; &lt;li&gt;学习思维2&lt;/li&gt; &lt;li&gt;学习思维3&lt;/li&gt; &lt;li&gt;学习思维4&lt;/li&gt; &lt;li&gt;学习思维5&lt;/li&gt; &lt;li&gt;学习思维6&lt;/li&gt; &lt;li&gt;学习思维7&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 盒子模型什么是盒子? 盒子是用来存储物品的。 思考一下：一个盒子是由哪些部分组成的？ 我们可以将一个盒子理解为一个快递的包裹：有内容+有填充物+纸盒子 那么我们如何去理解CSS中的盒子呢？ 在CSS中一个盒子的组成部分：内容（content）+内填充（padding）+边框（border）+外边距（margin） 一个盒子中的主要属性：width、height、padding、border、margin。 盒子模型图如下（网页打开后检查即可见盒子模型图）： 效果图如下： 代码如下： 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px;/*这里的width属性指的是盒子里面内容的宽度*/ height: 100px;/*这里的width属性指的是盒子里面内容的高度度*/ padding: 20px;/*内填充 盒子里面内容到边框的距离*/ border: 1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;学习学习学习学习学习学习学习学习学习 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 问题：请回答如何计算一个盒子的总宽度?答：一个盒子的总宽度=盒子里面内容的宽度+左右两边的填充+左右两边的边框线 问题：请回答如何计算一个盒子的总高度?答：一个盒子的总高度=盒子里面内容的高度+上下两边的填充+上下两边的边框线 注意：一个盒子的高度一般情况下是不用设置的，因为一个盒子的高度它应该是由其内容来决定的。 上述代码对盒子总宽度的验证图（及其查看盒子总宽高的示意图）如下： paddingpadding是内填充的意思，指的是盒子中间的内容到边框的这一段距离。 padding有4个方向的，所以我们能够分别描述这4个方向的padding。 方法有两种：第一种我们称之为小属性，第二种我们称之为简写属性。 小属性： padding-top：上内填充 padding-right：右内填充 padding-bottom：下内填充 padding-left：左内填充 盒子模型效果图如下： 代码如下： 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;padding小属性&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px;/*这里的width属性指的是盒子里面内容的宽度*/ height: 100px;/*这里的width属性指的是盒子里面内容的高度度*/ /*使用小属性来描述内填充*/ padding-top: 20px;/*上内填充*/ padding-right: 30px;/*右内填充*/ padding-bottom: 40px;/*下内填充*/ padding-left: 50px;/*左内填充*/ border: 1px solid red;/*外边框*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;学习学习学习学习学习学习学习学习学习 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 简写属性： padding：这个属性是有方向的，可以同时表示四个方向，这个属性的方向是有顺序的，顺序是顺时针方向，也就是：上、右、下、左这个顺序。 padding:20px;表示上右下左都是20个像素。 padding:20px 10px;表示上下为20px，左右为10px。 padding:20px 10px 5px;表示上为20px，左右为10px，下为5px。 padding简写属性的代码如下： 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;padding简写属性&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px;/*这里的width属性指的是盒子里面内容的宽度*/ height: 100px;/*这里的width属性指的是盒子里面内容的高度度*/ /*使用简写属性来描述内填充*/ padding: 20px 30px 40px 50px; /*分别为上、右、下、左的内填充*/ border: 1px solid red;/*外边框*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;学习学习学习学习学习学习学习学习学习 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; marginmargin它表示外边距的意思，它是指盒子与盒子之间的距离。 margin它也是有4个方向的，所以我们也能通过4个方向对其进行描述。 方法有两种：第一种我们称之为小属性，第二种我们称之为简写属性。 小属性： margin-top:上外边距 margin-right：右外边距 margin-bottom:下外边距 margin-left:左外边距 简写属性： margin:简写属性它是有方向的，这里的方向是一个顺时针方向，它的方向顺序是：上、右、下、左。 margin:10px;表示上右下左这四个方向的外边距都是10像素。 margin:10px 20px;表示上下的外边距为10像素，左右的外边距为20像素。 margin:10px 20px 30px;表示上外边距为10像素，左右外边距为20像素，下外边距为30像素。 margin:10px 20px 30px 40px;表示上外边距为10像素，右外边距为20像素，下边距为30像素，左边距为40像素。 效果图： 代码如下： 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;margin简写属性&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box1&#123; width: 100px;/*这里的width属性指的是盒子里面内容的宽度*/ height: 100px;/*这里的width属性指的是盒子里面内容的高度度*/ background-color: red; /*margin-bottom: 20px;下外边距*/ /*使用简写属性来描述下外边距*/ margin:0px 0px 20px 0px; &#125; .box2&#123; width: 100px; height: 100px; background-color: #00f; /*margin-top: 40px;上外边距*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; margin的注意事项margin有坍塌现象什么是margin的塌陷现象？ 1、在标准的文档流中，竖直方向的margin值不会叠加，它会取较大值。 2、横着方向是没有塌陷现象 3、浮动元素没有margin的塌陷现象的 竖直方向的margin值不会叠加，它会取较大值。效果图如下： 代码如下： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;竖直方向的margin值不会叠加，它会取较大的值&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box1&#123; width: 100px; height: 100px; background-color: red; margin-bottom: 20px; &#125; .box2&#123; width: 100px; height: 100px; background-color: blue; margin-top: 40px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 横着方向是没有塌陷现象。效果图如下： 代码如下： 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;横着方向没有margin塌陷现象&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .s1&#123; background-color: red; margin-right:20px; &#125; .s2&#123; background-color: blue; margin-left:40px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span class=&quot;s1&quot;&gt;学会复习&lt;/span&gt;&lt;!--行内标签--&gt; &lt;span class=&quot;s2&quot;&gt;学会总结&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 浮动元素没有margin的塌陷现象的。效果图如下： 代码如下： 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;浮动元素没有margin塌陷现象&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px; border: 5px solid #000; /*清除浮动*/ overflow: hidden; &#125; .box div&#123; width: 100px; height: 100px; &#125; .box1&#123; background-color: red; float: left;/*向左浮动*/ margin-bottom: 20px; &#125; .box2&#123; background-color: blue; float: right;/*向左浮动*/ margin-top: 40px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; margin居中 代码如下： 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;margin居中&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px; height: 100px; border: 5px solid #000; background-color: red; /*两两配合实现自动居中*/ /*margin-left: auto;左外边距 margin-right: auto;右外边距 margin-top: 100px; margin-bottom: 100px;*/ /*使用简写属性*/ margin:100px auto; &#125; p&#123; height: 50px; background-color: skyblue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;p&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 注意： 使用margin来实现水平居中时，一定要有固定的宽度（给这个盒子设定一个固定的宽度） 只有块元素可以实现水平居中，行内元素是不能实现水平居中的。（行内元素无法设置宽度，所以宽度语句在行内元素中失效） 只有标准文档流（加float变成非标准文档流就不能居中）中的盒子才可以使用margin来实现水平居中 margin属性是用来实现盒子的水平居中，而不是文本的水平居中。text-align属性用于实现文本的对齐方式，如果其值为center就表示文本水平居中，而不能实现盒子的水平居中。 效果图： 代码如下： 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;margin居中&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px; height: 100px; border: 5px solid #000; background-color: red; /*两两配合实现自动居中*/ /*margin-left: auto;左外边距 margin-right: auto;右外边距 margin-top: 100px; margin-bottom: 100px;*/ /*使用简写属性*/ margin:100px auto; &#125; p&#123; height: 50px; background-color: skyblue; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;p&gt;学习要以赚钱为目的&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 善于使用父元素的padding而不是子元素的margin与目标相悖的效果图如下： 要解决上图问题，有两种方法。 第一种，给其父元素设置一个边框线，但是这种方法不常用，因为边框一般是用来测试代码的，很少会给一个盒子设置边框；第二种，不要使用子元素的margin，而是要使用父元素的padding。 第一种，给其父元素设置一个边框线，但是这种方法不常用，因为边框一般是用来测试代码的，很少会给一个盒子设置边框。效果图如下： 第二种，不要使用子元素的margin，而是要使用父元素的padding。效果图与上相同，具体如下： 具体代码如下： 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;margin需求&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; /*使盒子与网页边线重合*/ margin:0; padding: 0; &#125; .box&#123; width: 300px; height: 500px; background-color: #0f0; /*border: 1px solid #f00;*/ padding-top: 100px; &#125; .content&#123; width: 100px; height: 100px; background-color: #f00; /*margin-top: 100px;设定上外边距为100像素*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 说明:margin这个属性它本身是用来描述兄弟与兄弟元素之间的关系，不是用于描述父子元素之间的关系的。如果是父子元素的关系，就最好使用给其父元素设置padding属性。 borderborder：它是“边框的意思”边框有三个要素：粗细 线型 颜色语法格式：border:粗细 线型 颜色提示：边框的颜色可以不写，默认为黑色，其他两个值必须写，否则不显示边框。 边框的线型：dotted dashed solid double groove ridge insert outset(前三个常用)其实边框也是有四个方向： border-top border-bottom border-left border-right 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;边框&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 400px; height: 400px; /*边框的线型：dotted dashed solid double groove ridge insert outset*/ border-top: 1px outset skyblue; /*其实边框也是有四个方向： border-top border-bottom border-left border-right*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; displaydisplay是显示的意思，它就是用来进行行内元素与块元素之间香菇转换，将隐藏的元素显示或者是将显示的元素隐藏。 display这个属性取值：inline(行内)、block(块级)、none(无) 当我们将一个行内元素的display属性的值设置为block以后，那么这个元素就会转换为块级元素。效果图如下： 代码如下： 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;display-block&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; span&#123; width: 100px; height: 100px;/*行内元素，宽高的设置不起作用*/ background-color: red; /*使用display属性，将行内元素转换为块级元素*/ display: block; margin-bottom: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span&gt;加油&lt;/span&gt; &lt;span&gt;努力&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 当我们将一个块级元素的display设置为inline以后，这个元素就会从块级元素转换为行内元素。 代码如下: 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;display-inline&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; h2&#123; width: 100px; height: 100px; background-color: red; /*使用display属性，将块级元素转换为行内元素*/ margin-bottom: 20px; display: inline;/*行内元素，宽高的设置不起作用*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;成功者不害怕失去&lt;/h2&gt; &lt;h2&gt;我是一个块&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; 注意：如果将行内元素转换为块级元素，那么这个元素就会拥有块级元素的特点。 如果将块级元素转换为行内元素，那么这个元素就会拥有行内元素的特点。 将一个显示的元素隐藏，或将一个隐藏的元素显示。这两个功能主要由javaScript来使用。display:none;将一个显示的元素进行隐藏display:block;不仅表示转换为块级元素，还表示将一个隐藏的元素进行显示 display综合案例实践（重要） 代码涉及前面的内容较多，该练习代码需要重点消化： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;display属性的综合案例&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin:0; padding: 0; &#125; body&#123; background: url(C:\\\\Users\\\\asus\\\\Desktop\\\\00.png); background-repeat: no-repeat;/*图片不平铺，仅显示一张图片*/ /*怎么让插入的图片居中显示？？？*/ background-position: center top;/*该属性有两个值，水平位置和垂直位置*/ &#125; ul&#123; list-style: none;/*去掉项目符号*/ &#125; .nav&#123; width: 960px; height: 40px; margin:100px auto; &#125; .nav ul li&#123; float: left; width: 120px; height: 40px; line-height: 40px;/*使得文字垂直居中*/ text-align: center; background: url(C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg) repeat; &#125; .nav ul li a&#123; width: 120px; height: 40px;/*a标签是行内元素，设置宽高没有作用*/ display: block;/*将行内元素转换为块元素便于宽高的设置起作用*/ &#125; .nav ul li a:link,.nav ul li a:visited&#123; text-decoration: none;/*去掉文字内容的下划线*/ color: red; &#125; .nav ul li a:hover&#123; background-image: url(C:\\\\Users\\\\asus\\\\Pictures\\\\99.jpg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;nav&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; positionposition在英文中表示“位置”的意思，它主要用于实现对元素的定位。在CSS中定位分为三种：position:fixed 固定定位position:relative 相对定位position:absolute 绝对定位 注意：在使用定位属性时，一定要配合定位的坐标来使用！left：表示定位的元素离左边多远right：表示定位的元素离右边多远top：表示定位的元素离上边多远bottom：表示定位的元素离下边多远 固定定位语法：position:fixed 固定定位，它是相对于浏览器窗口来进行定位，不管页面如何滚动，固定定位元素显示的位置不会改变。 特点：固定定位元素它脱离了文档流；固定定位元素的层级壁标准文档流里面的元素高，所以固定定位元素它会压盖住标准文档流里面的元素；固定定位元素不再占用空间；固定定位元素它显示的位置不会随着浏览器的滚动而滚动。 效果图如下： 上面效果图的代码如下： 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;position固定定位&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin:0; padding: 0; &#125; p&#123; width: 100px; height: 100px; background-color: red; /*给p标签增加定位的属性*/ position: fixed; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;&lt;/p&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt;&lt;/body&gt;&lt;/html&gt;&gt; 案例1：使用固定定位来实现返回顶部的作用（重点） 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用固定定位来实现返回顶部的按钮&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; /*清除所有边距*/ margin:0; padding: 0; &#125; a&#123; width: 60px; height: 60px;/*a标签是行内元素，宽高不起作用*/ /*将行内元素转换为块级元素*/ display: block; background-color: blue; text-align: center; line-height: 30px; color: red; font-weight: bold; /*使用固定定位*/ position: fixed; right: 30px;/*离右边30像素*/ bottom: 100px;/*离下边100像素*/ &#125; a:link,a:visited&#123; text-decoration: none;/*去除下划线*/ &#125; a:hover&#123; background-image: url(C:\\\\Users\\\\asus\\\\Pictures\\\\99.jpg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;#&quot;&gt;返回&lt;br/&gt;顶部&lt;/a&gt; &lt;p&gt;这是顶部哦&lt;/p&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt;&lt;/body&gt;&lt;/html&gt;&gt; 案例2（重点）：使用固定定位来实现顶部的导航栏（推荐Bootstrap网，关于前端开发框架） 代码需要仔细品尝，具体如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; &lt;title&gt;使用固定定位来实现顶部的导航栏&lt;&#x2F;title&gt; &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .nav&#123; width: 100%; height: 60px; background-color: #222222;&#x2F;*可以利用火狐浏览器中开发者工具里的取色器拾取美丽页面的颜色*&#x2F; &#x2F;*使用固定定位*&#x2F; position: fixed; left: 0; top: 0; &#125; .nav .inner_c&#123; width: 700px; height: 60px; margin:0 auto;&#x2F;*实现自动居中*&#x2F; &#x2F;*background: red;*&#x2F; &#125; ul&#123; list-style: none; &#125; ul li&#123; float: left; width: 100px; height: 60px; line-height: 60px; text-align: center; &#125; ul li a&#123; display: block; width: 100px; height: 60px; text-decoration: none;&#x2F;*去除文本下划线*&#x2F; color:white; font-weight: bold; &#125; ul li a:hover&#123; background-color: gold; &#125; body&#123; padding: 60px;&#x2F;*因为固定定位会遮挡内容*&#x2F; &#125; &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;div class&#x3D;&quot;nav&quot;&gt; &lt;div class&#x3D;&quot;inner_c&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;网站栏目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;网站栏目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;网站栏目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;网站栏目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;网站栏目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;网站栏目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;网站栏目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;img src&#x3D;&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt&#x3D;&quot;这是一张图片&quot;&gt; &lt;img src&#x3D;&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt&#x3D;&quot;这是一张图片&quot;&gt; &lt;img src&#x3D;&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt&#x3D;&quot;这是一张图片&quot;&gt; &lt;img src&#x3D;&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt&#x3D;&quot;这是一张图片&quot;&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&gt; 相对定位语法：position:relative 固定定位是相对于浏览器窗口的，而相对定位是相对于“原来的自己”定位的。 相对定位元素的特点： 相对定位元素它没有脱离标准文档流 相对定位元素如果没有设置定位的坐标，那么相对定位元素还在原来的位置 相对定位元素设置了定位的坐标以后，它会在老家位置留下一个坑 相对定位元素它会将标准文档流中的元素压盖住 相对定位元素的定位坐标值可以是负数 注意： 相对定位元素它会在老家留下一个坑，所以一般情况下很少单独使用，它主要是用来配合“绝对定位”元素来使用的 效果图如下： 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;相对定位&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin:0; padding: 0; &#125; .box&#123; width: 600px; border: 1px solid black; margin: 100px auto; padding-left: 20px; &#125; .box div&#123; width: 100px; height: 100px; &#125; .div1&#123; background-color: red; &#125; .div2&#123; background-color: blue; /*相对定位属性*/ position: relative;/*若设置为固定定位，会被下一个元素覆盖*/ /*设置定位的坐标*/ left: 100px; top:-100px; /*相对定位元素的特点： 相对定位元素它没有脱离标准文档流 相对定位元素如果没有设置定位的坐标，那么相对定位元素还在原来的位置 相对定位元素设置了定位的坐标以后，它会在老家位置留下一个坑 相对定位元素它会将标准文档流中的元素压盖住 相对定位元素的定位坐标值可以是负数 注意： 相对定位元素它会在老家留下一个坑，所以一般情况下很少单独使用，它主要是用来配合“绝对定位”元素来使用的*/ &#125; .div3&#123; background-color: #0f0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&gt; 案例效果图如下： 案例代码如下： 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; &lt;title&gt;相对定位案例&lt;&#x2F;title&gt; &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt; &#x2F;*使用属性选择器来匹配元素*&#x2F; input[type&#x3D;&quot;txt&quot;]&#123; font-size: 36px; &#125; input[type&#x3D;&quot;button&quot;]&#123; position: relative; top: 6px; &#125; &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;input type&#x3D;&quot;txt&quot;&gt;&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;检测用户名&quot;&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 绝对定位语法：position:absolute 什么是绝对定位？绝对定位是相对于“祖先定位元素”来进行定位 什么是祖先定位元素？绝对定位元素它会先去查找器父元素是否设置了定位的属性，如果有设置定位的属性那么它就会相对于其父元素来进行定位，如果它的父元素没有设置定位属性，那么它就会去查找器父元素的上一级元素是否设置了定位的属性，如果有设置就使用其父元素的上一级元素进行定位，但是如果没有设置，那么会继续向上一级进行查找，如果其祖先元素都没有设置定位属性，那么它会相对于“浏览器窗口”来进行定位。 绝对定位元素特点： 绝对定位元素它脱离了标准文档流 绝对定位元素不占用空间 绝对定位元素它会压盖住标准文档流中的元素 body标签相当于浏览器窗口 绝对定位元素它会相对于其“祖先定位元素”来定位，这里的祖先定位元素可以是相对定位，也可以是固定定位，也可以是绝对定位，但是我们一般只会给其祖先定位元素设置相对定位属性。“子绝父相”子元素设置绝对定位父元素设置相对定位。 效果图： 上述效果图代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;绝对定位&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .box&#123; width: 600px; border: 1px solid #000; margin:100px auto; position: relative; &#125; .box div&#123; width: 100px ; height: 100px; &#125; .div1&#123; background-color: #f00; &#125; .div2&#123; background-color:#0f0; /*绝对定位属性*/ position:absolute; /*设置定位坐标*/ right: 0; top: 0; /*绝对定位元素特点： 绝对定位元素它脱离了标准文档流 绝对定位元素不占用空间 绝对定位元素它会压盖住标准文档流中的元素 body标签相当于浏览器窗口 */ &#125; .div3&#123; background-color: #00f; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&gt;&lt;/body&gt;&lt;/html&gt; 效果图如下： 上述效果图代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;绝对定位&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .divp&#123; width: 800px; border: 3px solid skyblue; margin: 100px auto; position: relative; &#125; .box&#123; width: 600px; border: 1px solid #000; margin:100px auto; &#125; .box div&#123; width: 100px ; height: 100px; &#125; .div1&#123; background-color: #f00; &#125; .div2&#123; background-color:#0f0; /*绝对定位属性*/ position:absolute; /*设置定位坐标*/ right: 0; top: 0; /*绝对定位元素特点： 绝对定位元素它脱离了标准文档流 绝对定位元素不占用空间 绝对定位元素它会压盖住标准文档流中的元素 body标签相当于浏览器窗口 */ &#125; .div3&#123; background-color: #00f; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;divp&quot;&gt;&lt;!--爷爷--&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 问题：如果当前元素的父元素与其爷爷元素都设置了相对定位，那么请回答当前的绝对定位它会相对于谁来进行定位？ 答：当前的绝对定位它会相对于其父元素来进行定位，也就是说当前绝对定位元素查找到了其祖先定位元素已经设置了定位的属性就不会查找上一级。 使用绝对定位来实现手拉网的效果效果图如下： 具体代码如下： 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用绝对定位来实现拉手网上的效果&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*第一步：清除内填充与外边框样式*/ *&#123; margin: 0; padding: 0; &#125; .box&#123; width: 960px; height: 643px; border: 1px solid #000; margin: 50px auto; position: relative; &#125; .box span&#123; /*绝对定位*/ position: absolute; left: 0; top: -15px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;span&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.jpeg&quot;&gt; &lt;/span&gt; &lt;div&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Pictures\\\\99.jpg&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; z-indexz-index表示谁压着谁，数值大的会雅盖住数值小的只有定位的元素才有z-index值，只有设置了固定定位、相对定位、绝对定位了的元素它们才会有z-indexz-index的值是没有单位的，值是一个正整数，默认的z-index的值为0如果多个定位元素没有设置z-index属性，或者z-index值设置一样，那么写在HTML后面的定位元素就会雅盖住前面的定位元素。 z-index在工作中的应用。案例效果图如下： 上述案例代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;z-index在工作中的使用&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .nav&#123; width: 100%; height: 60px; background-color: #222222;/*可以利用火狐浏览器中开发者工具里的取色器拾取美丽页面的颜色*/ /*使用固定定位*/ position: fixed; left: 0; top: 0; z-index: 999999;/*做了导航条一定要加z-index，并给它一个超大值，避免内容压盖导航栏*/ &#125; .nav .inner_c&#123; width: 700px; height: 60px; margin:0 auto;/*实现自动居中*/ /*background: red;*/ &#125; ul&#123; list-style: none; &#125; ul li&#123; float: left; width: 100px; height: 60px; line-height: 60px; text-align: center; &#125; ul li a&#123; display: block; width: 100px; height: 60px; text-decoration: none;/*去除文本下划线*/ color:white; font-weight: bold; &#125; ul li a:hover&#123; background-color: gold; &#125; body&#123; padding: 60px;/*因为固定定位会遮挡内容*/ &#125; p&#123; width: 200px; height: 30px; line-height: 30px; text-align: center; background-color: red; /*相对定位*/ position: relative; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;nav&quot;&gt; &lt;div class=&quot;inner_c&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;p&gt;看看我在哪里？&lt;/p&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot; alt=&quot;这是一张图片&quot;&gt;&lt;/body&gt;&lt;/html&gt; css3css3与css2的区别css3=css2+新语法+新的属性（之前的内容是css2的）就是对css2进行扩充、删除、优化 结构伪类 E:first-child 匹配第一个孩子 E:last-child 匹配最后一个孩子 E:nth-child(n) 匹配第n个孩子 E:nth-child(2n) 匹配偶数个孩子 E:nth-child(even) 匹配偶数个孩子 E:nth-child(2n+1) 匹配奇数个孩子 E:nth-child(odd) 匹配奇数个孩子 E:only-child 匹配有且只有一个孩子 E:first-child 匹配第一个孩子。案例效果图如下： 上述案例效果图的代码如下： 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;结构伪类&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用css3中结构伪类选择器来匹配元素*/ /*匹配第一个孩子，格式：E：first-child&#123;属性：值；&#125;*/ .box ul li:first-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;ul&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; E:last-child 匹配最后一个孩子。案例图如下： 案例图代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;结构伪类&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用css3中结构伪类选择器来匹配元素*/ /*匹配第一个孩子，格式：E：first-child&#123;属性：值；&#125;*/ /*.box ul li:first-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配最后一个孩子，E:last-child&#123;属性：值；&#125;*/ .box ul li:last-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;ul&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 匹配第n个孩子，E:nth-child(n){属性：值；}。效果图如下： 上述代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;结构伪类&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用css3中结构伪类选择器来匹配元素*/ /*匹配第一个孩子，格式：E：first-child&#123;属性：值；&#125;*/ /*.box ul li:first-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配最后一个孩子，E:last-child&#123;属性：值；&#125;*/ /*.box ul li:last-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配第n个孩子，E:nth-child(n)&#123;属性：值；&#125;*/ .box ul li:nth-child(8)&#123; color: pink; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;ul&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 匹配偶数个孩子，E:nth-child(2n){属性：值；}或者E:nth-child(even){属性：值；}。效果图如下： 上述代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;结构伪类&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用css3中结构伪类选择器来匹配元素*/ /*匹配第一个孩子，格式：E：first-child&#123;属性：值；&#125;*/ /*.box ul li:first-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配最后一个孩子，E:last-child&#123;属性：值；&#125;*/ /*.box ul li:last-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配第n个孩子，E:nth-child(n)&#123;属性：值；&#125;*/ /*.box ul li:nth-child(8)&#123; color: pink; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; &#125;*/ /*匹配偶数个孩子，E:nth-child(2n)&#123;属性：值；&#125;或者E:nth-child(even)&#123;属性：值；&#125;*/ .box ul li:nth-child(2n)&#123; color: #00f; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; background: #040; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;ul&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 匹配奇数个孩子，E:nth-child(2n+1){属性：值；}或者E:nth-child(odd){属性：值；}。效果图如下: 上述案例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;结构伪类&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用css3中结构伪类选择器来匹配元素*/ /*匹配第一个孩子，格式：E：first-child&#123;属性：值；&#125;*/ /*.box ul li:first-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配最后一个孩子，E:last-child&#123;属性：值；&#125;*/ /*.box ul li:last-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配第n个孩子，E:nth-child(n)&#123;属性：值；&#125;*/ /*.box ul li:nth-child(8)&#123; color: pink; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; &#125;*/ /*匹配偶数个孩子，E:nth-child(2n)&#123;属性：值；&#125;或者E:nth-child(even)&#123;属性：值；&#125;*/ /*.box ul li:nth-child(2n)&#123; color: #00f; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; background: #040; &#125;*/ /*匹配奇数个孩子，E:nth-child(2n+1)&#123;属性：值；&#125;或者E:nth-child(odd)&#123;属性：值；&#125;*/ .box ul li:nth-child(2n+1)&#123; color: #00f; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; background: #040; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;ul&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 匹配有且仅有一个孩子，E:onlyth-child{属性：值；}。效果图如下： 上述案例图代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;结构伪类&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用css3中结构伪类选择器来匹配元素*/ /*匹配第一个孩子，格式：E：first-child&#123;属性：值；&#125;*/ /*.box ul li:first-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配最后一个孩子，E:last-child&#123;属性：值；&#125;*/ /*.box ul li:last-child&#123; color: red; width: 100px; height: 30px; line-height: 30px; text-align: center; border: 1px solid black; &#125;*/ /*匹配第n个孩子，E:nth-child(n)&#123;属性：值；&#125;*/ /*.box ul li:nth-child(8)&#123; color: pink; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; &#125;*/ /*匹配偶数个孩子，E:nth-child(2n)&#123;属性：值；&#125;或者E:nth-child(even)&#123;属性：值；&#125;*/ /*.box ul li:nth-child(2n)&#123; color: #00f; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; background: #040; &#125;*/ /*匹配奇数个孩子，E:nth-child(2n+1)&#123;属性：值；&#125;或者E:nth-child(odd)&#123;属性：值；&#125;*/ /*.box ul li:nth-child(2n+1)&#123; color: #00f; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; background: #040; &#125;*/ /*匹配有且仅有一个孩子，E:onlyth-child&#123;属性：值；&#125;*/ div ul li:only-child&#123; color: #00f; width: 100px; height: 40px; line-height: 40px; text-align: center; border: 1px solid skyblue; background: gold; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;ul&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;li&gt;阳光程序员&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div&gt;&lt;ul&gt;&lt;li&gt;我是90后&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 案例：使用CSS3中的结构伪类选择器来实现隔行变色的表格 效果图如下： 上述图的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;案例：使用CSS3中的结构伪类选择器来实现隔行变色的表格&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table tr:nth-child(even)&#123; background-color: #f00; &#125; table tr:nth-child(odd)&#123; background-color: #00f; &#125; /*当鼠标移动到tr上面的时候显示背景颜色为#ccc*/ table tr:hover&#123; background-color: #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table width=&quot;500&quot; border=&quot;1&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; border-collapse(折叠的意思)这个属性主要是用于来和ving表格的边框线，其值为：collapse border-collapse:collapse;效果图如下： 上述代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;合并表格的边框线&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table&#123; border-collapse: collapse; /*给边框设置颜色*/ border-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table width=&quot;600&quot; border=&quot;1&quot; &gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 盒子阴影语法格式： box-shadow:水平方向的阴影 垂直方向的阴影 阴影的清晰度 阴影的大小 阴影的颜色 阴影的位置 inset outset(默认值)。前面两个属性值是必写项，后面的是可选。 盒子阴影可以 代码： 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;盒子阴影&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px; height: 100px; border: 1px solid red; /*给这个盒子设置阴影 语法格式： box-shadow:水平方向的阴影 垂直方向的阴影 阴影的清晰度 阴影的大小 阴影的颜色 阴影的位置 inset outset(默认值)。前面两个属性值是必写项，后面的是可选*/ box-shadow: 3px 3px 3px 3px #f00 ; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 盒子阴影可以有多组值，多组之间用逗号隔开就可以。效果图如下： 代码： 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;盒子阴影&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px; height: 100px; border: 1px solid red; /*给这个盒子设置阴影 语法格式： box-shadow:水平方向的阴影 垂直方向的阴影 阴影的清晰度 阴影的大小 阴影的颜色 阴影的位置 inset outset(默认值)。前面两个属性值是必写项，后面的是可选*/ box-shadow: 3px 3px 3px 3px #f00,-4px -4px 2px 2px #DA70D6 inset; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 给图片设置阴影，效果图如下： 代码如下： 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;给图片设置阴影&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; img&#123; box-shadow: 2px 2px 2px 2px #FFA07A; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot;&gt;&lt;/body&gt;&lt;/html&gt; 圆角矩形登陆界面的输入边框常用。 border-radius:左上 右上 右下 左下； 代码： 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;圆角矩形&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123; width: 100px; height: 100px; border: 1px solid #f00; &#125; /*使用结构伪类选择器来匹配元素*/ div:nth-child(1)&#123; /*圆角矩形 border-radius:左上 右上 右下 左下；*/ border-radius: 10px 20px 30px 40px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 上述效果图的代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;圆角矩形&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123; width: 100px; height: 100px; border: 1px solid #f00; &#125; /*使用结构伪类选择器来匹配元素*/ div:nth-child(1)&#123; /*圆角矩形 border-radius:左上 右上 右下 左下；*/ border-radius: 10px 20px 30px 40px; &#125; div:nth-child(2)&#123; /*圆角矩形 border-radius:左上 右上 右下 左下；*/ border-radius:40px;/*表示各个角的值都为20像素*/ &#125; div:nth-child(3)&#123; /*只想让左上角与左下角有圆角*/ border-radius: 40px 0px 0px 40px; &#125; div:nth-child(4)&#123; /*只想让左上角与右下角有圆角*/ border-radius: 40px 0px 40px 0px; &#125; div:nth-child(5)&#123; /*变成圆形. 如何实现一个圆形: 第一步:当前元素的高度与宽度相同,即该元素为正方形 第二步:使用border-radius这个属性,那么这个属性的值等于宽或高的一般*/ border-radius: 50px; background-color: #ccc; &#125; div:nth-child(6)&#123; /*椭圆*/ width: 100px; height: 40px; border-radius: 20px;/*要实现椭圆,就要设置圆角矩形值高度的一半*/ background-color: skyblue; &#125; div:nth-child(7)&#123; /*实现实心的上半部分是圆形*/ width: 100px; height: 50px;/*高度要等于宽度的一半*/ border-radius: 50px 50px 0px 0px; /*在设置圆角矩形的时候,只需要设置两个值,左上角与右上角,这两个角的值要等于高度*/ background-color: blue; &#125; div:nth-child(8)&#123; /*实现实心的左半部分是圆形*/ width: 100px; height: 50px;/*高度要等于宽度的一半*/ border-radius: 50px 0px 0px 50px;/*要等于高度*/ background-color: blue; &#125; div:nth-child(9)&#123; /*实现实心的右半部分是圆形*/ width: 100px; height: 50px;/*高度要等于宽度的一半*/ border-radius: 0px 50px 50px 0px;/*要等于高度*/ background-color: blue; &#125; div:nth-child(10)&#123; /*实现实心的下半部分是圆形*/ width: 100px; height: 50px;/*高度要等于宽度的一半*/ border-radius: 0px 0px 50px 50px;/*要等于高度*/ background-color: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;!--不能用&lt;hr/&gt;分隔,也不能用br不知道为什么--&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 圆角矩形案例 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;圆角矩形案例&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123; background: #ccc; &#125; .more&#123; width: 60px; height: 20px; background-color: #fff; text-align: center; line-height: 20px; margin: 100px auto; /*圆角矩形&quot;椭圆形&quot;*/ border-radius: 10px;/*变成高度的半*/ font-size: 12px; font-family: &quot;微软雅黑&quot;; &#125; /*a标签转换为块元素*/ a&#123; display: block; width: 60px; height: 20px; border-radius: 10px; &#125; a:link,a:visited&#123; color: #000; text-decoration: none; &#125; .more a:hover&#123;/*此处采用.more设置就不用对a标签进行转换*/ background-color: gold; color: #fff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;more&quot;&gt;&lt;a href=&quot;#&quot;&gt;更多&lt;/a&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 上述实现圆角背景填充时稍微复杂，本人修改代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;圆角矩形案例&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123; background: #ccc; &#125; .more&#123; width: 60px; height: 20px; background-color: #fff; text-align: center; line-height: 20px; margin: 100px auto; /*圆角矩形&quot;椭圆形&quot;*/ border-radius: 10px;/*变成高度的半*/ font-size: 12px; font-family: &quot;微软雅黑&quot;; /*text-decoration: none;放在此处不起作用*/ &#125; a:link,a:visited&#123; color: #000; text-decoration: none; /*放在此处起作用,是因为属于链接的内容,此处不继承???*/ &#125; a:hover&#123; color: #fff; &#125; .more:hover&#123;/*此处采用.more设置就不用对a标签进行转换*/ background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;more&quot;&gt;&lt;a href=&quot;#&quot;&gt;更多&gt;&gt;&lt;/a&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 圆形图片案例 代码如下： 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;圆角图片案例&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; img&#123; width:800px ; height:800px ; /*margin: 200px auto;为什么不能实现居中*/ border-radius:400px; border:3px solid black; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\00.png&quot;&gt;&lt;/body&gt;&lt;/html&gt; CSS透明度只要是颜色，都可以用透明度 rgba(红色，绿色，蓝色，透明度) a表示透明度的意思，透明度的取值：0-1之间，0表示完全透明，1表示不透明。 背景颜色透明 background-color(255,255,0,0.3) 边框颜色透明 border:1px solid rgba(255,255,255,0.5) 上述效果图代码： 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;背景颜色透明度&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px; height: 100px; /*border: 1px solid rgb(234,45,67);*/ background-color:rgba(186,0,56,0.3);/*颜色的表达用十进制*/ position: fixed;/*使用固定定位盖住标准文档流*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;p&gt;寻找兴奋点：一旦闲下来，自己就喜欢在抖音等平台寻找刺激，这样不仅浪费了大量时间，还耗费了心神，影响着后续一连串的工作，得不偿失。20200814夜晚，我发现，当自己不知道干什么时，可以去中国大学慕课上寻找刺激，因为上面有很多自己未接触过的过程等待自己去学，哪怕坚持不下去，也学到一点知识，总比刷抖音好。另外，通过视频学习自己不会像刷抖音那样停不下来，如此以来，便可养成良好的作息与工作习惯。&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 上述效果图代码： 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;文本颜色设置透明度&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .box&#123; width: 100px; height: 100px; color: rgb(255,0,0,0.5); border: 3px solid rgb(0,0,0,0.3) &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;中国大学慕课寻找兴奋&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://ilovestudy153.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://ilovestudy153.github.io/tags/CSS/"}]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2020-08-30T11:39:05.000Z","updated":"2020-09-03T15:12:48.987Z","comments":true,"path":"2020/08/30/wo-de-di-yi-pian-bo-ke-wen-zhang/","link":"","permalink":"http://ilovestudy153.github.io/2020/08/30/wo-de-di-yi-pian-bo-ke-wen-zhang/","excerpt":"","text":"第一章内容$$\\frac{a+c}{b+d}$$$$x^7$$$$x\\timesy=z$$ 第二章内容 第三章内容 第四章加油，向计算机的海洋进军","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://ilovestudy153.github.io/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-08-30T11:29:15.488Z","updated":"2020-09-03T15:12:45.333Z","comments":true,"path":"2020/08/30/hello-world/","link":"","permalink":"http://ilovestudy153.github.io/2020/08/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://ilovestudy153.github.io/tags/test/"}]}],"categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://ilovestudy153.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://ilovestudy153.github.io/tags/CSS/"},{"name":"test","slug":"test","permalink":"http://ilovestudy153.github.io/tags/test/"}]}